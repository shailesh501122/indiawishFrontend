{"ast":null,"code":"import { JwtHelperService } from '@auth0/angular-jwt';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.baseUrl = 'https://localhost:7058/api/User/';\n    this.userPayload = this.decodedToken();\n  }\n  signUp(userObj) {\n    return this.http.post(`${this.baseUrl}register`, userObj);\n  }\n  signIn(loginObj) {\n    return this.http.post(`${this.baseUrl}authenticate`, loginObj);\n  }\n  signOut() {\n    this.router.navigate(['/']);\n    localStorage.clear();\n  }\n  storeToken(token) {\n    localStorage.setItem('token', token);\n  }\n  storeRefreshToken(refreshToken) {\n    localStorage.setItem('refreshToken', refreshToken);\n  }\n  getRefreshToken() {\n    return localStorage.getItem('refreshToken');\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  isLoggedIn() {\n    return !!this.getToken();\n  }\n  decodedToken() {\n    const helper = new JwtHelperService();\n    return helper.decodeToken(this.getToken());\n  }\n  getFullNameFromToken() {\n    if (this.userPayload) return this.userPayload.name;\n  }\n  getRoleFromToken() {\n    if (this.userPayload) return this.userPayload.role;\n  }\n  renewToken(accessoken, refreshToken) {\n    let tokenApi;\n    if (accessoken === null || refreshToken === null) tokenApi = null;\n    tokenApi = {\n      accessToken: accessoken,\n      refreshToken: refreshToken\n    };\n    return this.http.post(`${this.baseUrl}refresh`, tokenApi);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAMA,SAASA,gBAAgB,QAAQ,oBAAoB;;;;AAKrD,OAAM,MAAOC,WAAW;EAGtBC,YACUC,IAAgB,EAChBC,MAAc;IADd,SAAI,GAAJD,IAAI;IACJ,WAAM,GAANC,MAAM;IAJR,YAAO,GAAW,kCAAkC;IAM1D,IAAI,CAACC,WAAW,GAAG,IAAI,CAACC,YAAY,EAAE;EACxC;EAEAC,MAAM,CAACC,OAAa;IAClB,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAe,GAAG,IAAI,CAACC,OAAO,UAAU,EAAEF,OAAO,CAAC;EACzE;EAEAG,MAAM,CAACC,QAAgB;IACrB,OAAO,IAAI,CAACT,IAAI,CAACM,IAAI,CAAO,GAAG,IAAI,CAACC,OAAO,cAAc,EAAEE,QAAQ,CAAC;EACtE;EAEAC,OAAO;IACL,IAAI,CAACT,MAAM,CAACU,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;IAC3BC,YAAY,CAACC,KAAK,EAAE;EACtB;EAEAC,UAAU,CAACC,KAAa;IACtBH,YAAY,CAACI,OAAO,CAAC,OAAO,EAAED,KAAK,CAAC;EACtC;EACAE,iBAAiB,CAACC,YAAoB;IACpCN,YAAY,CAACI,OAAO,CAAC,cAAc,EAAEE,YAAY,CAAC;EACpD;EAEAC,eAAe;IACb,OAAOP,YAAY,CAACQ,OAAO,CAAC,cAAc,CAAC;EAC7C;EAEAC,QAAQ;IACN,OAAOT,YAAY,CAACQ,OAAO,CAAC,OAAO,CAAC;EACtC;EAEAE,UAAU;IACR,OAAO,CAAC,CAAC,IAAI,CAACD,QAAQ,EAAE;EAC1B;EAEAlB,YAAY;IACV,MAAMoB,MAAM,GAAG,IAAI1B,gBAAgB,EAAE;IACrC,OAAO0B,MAAM,CAACC,WAAW,CAAC,IAAI,CAACH,QAAQ,EAAG,CAAC;EAC7C;EAEAI,oBAAoB;IAClB,IAAI,IAAI,CAACvB,WAAW,EAAE,OAAO,IAAI,CAACA,WAAW,CAACwB,IAAI;EACpD;EAEAC,gBAAgB;IACd,IAAI,IAAI,CAACzB,WAAW,EAAE,OAAO,IAAI,CAACA,WAAW,CAAC0B,IAAI;EACpD;EAEAC,UAAU,CAACC,UAAiB,EAAEZ,YAAmB;IAC/C,IAAIa,QAAQ;IACZ,IAAGD,UAAU,KAAK,IAAI,IAAIZ,YAAY,KAAK,IAAI,EAC/Ca,QAAQ,GAAG,IAAI;IACfA,QAAQ,GAAE;MACRC,WAAW,EAACF,UAAU;MACtBZ,YAAY,EAACA;KACd;IACD,OAAO,IAAI,CAAClB,IAAI,CAACM,IAAI,CAAM,GAAG,IAAI,CAACC,OAAO,SAAS,EAACwB,QAAQ,CAAC;EAC/D;;AAhEWjC,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAmC,SAAXnC,WAAW;EAAAoC,YAFV;AAAM","names":["JwtHelperService","AuthService","constructor","http","router","userPayload","decodedToken","signUp","userObj","post","baseUrl","signIn","loginObj","signOut","navigate","localStorage","clear","storeToken","token","setItem","storeRefreshToken","refreshToken","getRefreshToken","getItem","getToken","isLoggedIn","helper","decodeToken","getFullNameFromToken","name","getRoleFromToken","role","renewToken","accessoken","tokenApi","accessToken","factory","providedIn"],"sourceRoot":"","sources":["D:\\New folder\\AngularAuthUI\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { UserStoreService } from 'src/app/services/user-store.service';\r\nimport { ILogin } from './../models/ILogin';\r\nimport { IApiResponse } from './../models/api-response.model';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { User } from '../models/user.model';\r\nimport { JwtHelperService } from '@auth0/angular-jwt';\r\nimport { Router } from '@angular/router';\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  private baseUrl: string = 'https://localhost:7058/api/User/';\r\n  private userPayload: any;\r\n  constructor(\r\n    private http: HttpClient,\r\n    private router: Router\r\n  ) {\r\n    this.userPayload = this.decodedToken();\r\n  }\r\n\r\n  signUp(userObj: User) {\r\n    return this.http.post<IApiResponse>(`${this.baseUrl}register`, userObj);\r\n  }\r\n\r\n  signIn(loginObj: ILogin) {\r\n    return this.http.post<User>(`${this.baseUrl}authenticate`, loginObj);\r\n  }\r\n\r\n  signOut() {\r\n    this.router.navigate(['/']);\r\n    localStorage.clear();\r\n  }\r\n\r\n  storeToken(token: string) {\r\n    localStorage.setItem('token', token);\r\n  }\r\n  storeRefreshToken(refreshToken: string) {\r\n    localStorage.setItem('refreshToken', refreshToken);\r\n  }\r\n\r\n  getRefreshToken(){\r\n    return localStorage.getItem('refreshToken');\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return localStorage.getItem('token');\r\n  }\r\n\r\n  isLoggedIn() {\r\n    return !!this.getToken();\r\n  }\r\n\r\n  decodedToken() {\r\n    const helper = new JwtHelperService();\r\n    return helper.decodeToken(this.getToken()!);\r\n  }\r\n\r\n  getFullNameFromToken() {\r\n    if (this.userPayload) return this.userPayload.name;\r\n  }\r\n\r\n  getRoleFromToken() {\r\n    if (this.userPayload) return this.userPayload.role;\r\n  }\r\n\r\n  renewToken(accessoken:string, refreshToken:string){\r\n    let tokenApi;\r\n    if(accessoken === null || refreshToken === null)\r\n    tokenApi = null;\r\n    tokenApi= {\r\n      accessToken:accessoken,\r\n      refreshToken:refreshToken\r\n    }\r\n    return this.http.post<any>(`${this.baseUrl}refresh`,tokenApi)\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}