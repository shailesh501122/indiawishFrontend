{"ast":null,"code":"import { catchError, switchMap, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"ng-angular-popup\";\nexport class TokenInterceptor {\n  constructor(auth, router, toast) {\n    this.auth = auth;\n    this.router = router;\n    this.toast = toast;\n  }\n  intercept(request, next) {\n    let authreq = request;\n    authreq = this.setTokenheader(request, this.auth.getToken());\n    return next.handle(authreq).pipe(catchError(errordata => {\n      if (errordata.status === 401) {\n        return this.handleUnauthorizedError(request, next);\n      }\n      return throwError(() => errordata);\n    }));\n  }\n  handleUnauthorizedError(request, next) {\n    const accessToken = this.auth.getToken();\n    const refreshToken = this.auth.getRefreshToken();\n    return this.auth.renewToken(accessToken, refreshToken).pipe(switchMap(data => {\n      this.auth.storeRefreshToken(data.refreshToken);\n      this.auth.storeToken(data.accessToken);\n      return next.handle(this.setTokenheader(request, data.accessToken));\n    }), catchError(err => {\n      return throwError(() => {\n        this.toast.error({\n          detail: 'ERROR',\n          summary: 'Token Expired',\n          duration: 5000\n        });\n        this.router.navigate(['/']);\n      });\n    }));\n  }\n  setTokenheader(request, token) {\n    return request.clone({\n      setHeaders: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n  }\n}\nTokenInterceptor.ɵfac = function TokenInterceptor_Factory(t) {\n  return new (t || TokenInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.NgToastService));\n};\nTokenInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TokenInterceptor,\n  factory: TokenInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AASA,SAASA,UAAU,EAAcC,SAAS,EAAEC,UAAU,QAAQ,MAAM;;;;;AAMpE,OAAM,MAAOC,gBAAgB;EAC3BC,YACUC,IAAiB,EACjBC,MAAc,EACdC,KAAqB;IAFrB,SAAI,GAAJF,IAAI;IACJ,WAAM,GAANC,MAAM;IACN,UAAK,GAALC,KAAK;EACZ;EAEHC,SAAS,CAACC,OAAyB,EAAEC,IAAiB;IACpD,IAAIC,OAAO,GAAGF,OAAO;IACrBE,OAAO,GAAG,IAAI,CAACC,cAAc,CAACH,OAAO,EAAE,IAAI,CAACJ,IAAI,CAACQ,QAAQ,EAAG,CAAC;IAC7D,OAAOH,IAAI,CAACI,MAAM,CAACH,OAAO,CAAC,CAACI,IAAI,CAC9Bf,UAAU,CAAEgB,SAAS,IAAI;MACvB,IAAIA,SAAS,CAACC,MAAM,KAAK,GAAG,EAAE;QAC5B,OAAO,IAAI,CAACC,uBAAuB,CAACT,OAAO,EAAEC,IAAI,CAAC;;MAEpD,OAAOR,UAAU,CAAC,MAAMc,SAAS,CAAC;IACpC,CAAC,CAAC,CACH;EACH;EAEAE,uBAAuB,CAACT,OAAyB,EAAEC,IAAiB;IAClE,MAAMS,WAAW,GAAG,IAAI,CAACd,IAAI,CAACQ,QAAQ,EAAG;IACzC,MAAMO,YAAY,GAAG,IAAI,CAACf,IAAI,CAACgB,eAAe,EAAG;IACjD,OAAO,IAAI,CAAChB,IAAI,CACbiB,UAAU,CAACH,WAAW,EAAEC,YAAY,CAAC,CACrCL,IAAI,CACHd,SAAS,CAAEsB,IAAiB,IAAI;MAC9B,IAAI,CAAClB,IAAI,CAACmB,iBAAiB,CAACD,IAAI,CAACH,YAAY,CAAC;MAC9C,IAAI,CAACf,IAAI,CAACoB,UAAU,CAACF,IAAI,CAACJ,WAAW,CAAC;MACtC,OAAOT,IAAI,CAACI,MAAM,CAAC,IAAI,CAACF,cAAc,CAACH,OAAO,EAAEc,IAAI,CAACJ,WAAW,CAAC,CAAC;IACpE,CAAC,CAAC,EACFnB,UAAU,CAAE0B,GAAG,IAAI;MACjB,OAAOxB,UAAU,CAAC,MAAK;QACrB,IAAI,CAACK,KAAK,CAACoB,KAAK,CAAC;UAACC,MAAM,EAAC,OAAO;UAAEC,OAAO,EAAC,eAAe;UAAEC,QAAQ,EAAC;QAAI,CAAC,CAAC;QAC1E,IAAI,CAACxB,MAAM,CAACyB,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;MAC7B,CAAC,CAAC;IACJ,CAAC,CAAC,CACH;EACL;EAEAnB,cAAc,CAACH,OAAyB,EAAEuB,KAAa;IACrD,OAAOvB,OAAO,CAACwB,KAAK,CAAC;MACnBC,UAAU,EAAE;QAACC,aAAa,EAAC,UAAUH,KAAK;MAAE;KAC7C,CAAC;EACJ;;AA5CW7B,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAAiC,SAAhBjC,gBAAgB;AAAA","names":["catchError","switchMap","throwError","TokenInterceptor","constructor","auth","router","toast","intercept","request","next","authreq","setTokenheader","getToken","handle","pipe","errordata","status","handleUnauthorizedError","accessToken","refreshToken","getRefreshToken","renewToken","data","storeRefreshToken","storeToken","err","error","detail","summary","duration","navigate","token","clone","setHeaders","Authorization","factory"],"sourceRoot":"","sources":["D:\\New folder\\AngularAuthUI\\src\\app\\interceptors\\token.interceptor.ts"],"sourcesContent":["import { Router } from '@angular/router';\r\nimport { Injectable } from '@angular/core';\r\nimport {\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpInterceptor,\r\n  HttpErrorResponse,\r\n} from '@angular/common/http';\r\nimport { catchError, Observable, switchMap, throwError } from 'rxjs';\r\nimport { AuthService } from '../services/auth.service';\r\nimport { NgToastService } from 'ng-angular-popup';\r\nimport { ITokenModel } from '../models/token.interface';\r\n\r\n@Injectable()\r\nexport class TokenInterceptor implements HttpInterceptor {\r\n  constructor(\r\n    private auth: AuthService,\r\n    private router: Router,\r\n    private toast: NgToastService\r\n  ) {}\r\n\r\n  intercept(request: HttpRequest<any>, next: HttpHandler) {\r\n    let authreq = request;\r\n    authreq = this.setTokenheader(request, this.auth.getToken()!);\r\n    return next.handle(authreq).pipe(\r\n      catchError((errordata) => {\r\n        if (errordata.status === 401) {\r\n          return this.handleUnauthorizedError(request, next);\r\n        }\r\n        return throwError(() => errordata);\r\n      })\r\n    );\r\n  }\r\n\r\n  handleUnauthorizedError(request: HttpRequest<any>, next: HttpHandler) {\r\n    const accessToken = this.auth.getToken()!;\r\n    const refreshToken = this.auth.getRefreshToken()!;\r\n    return this.auth\r\n      .renewToken(accessToken, refreshToken)\r\n      .pipe(\r\n        switchMap((data: ITokenModel) => {\r\n          this.auth.storeRefreshToken(data.refreshToken);\r\n          this.auth.storeToken(data.accessToken);\r\n          return next.handle(this.setTokenheader(request, data.accessToken));\r\n        }),\r\n        catchError((err) => {\r\n          return throwError(() => {\r\n            this.toast.error({detail:'ERROR', summary:'Token Expired', duration:5000});\r\n            this.router.navigate(['/'])\r\n          });\r\n        })\r\n      );\r\n  }\r\n\r\n  setTokenheader(request: HttpRequest<any>, token: string) {\r\n    return request.clone({\r\n      setHeaders: {Authorization:`Bearer ${token}`}\r\n    });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}