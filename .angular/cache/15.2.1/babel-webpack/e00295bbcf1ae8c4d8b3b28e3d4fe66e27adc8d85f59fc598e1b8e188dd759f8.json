{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport ValidateForm from 'src/app/helpers/validateform';\nimport { ResetPassword } from 'src/app/models/reset-password.model';\nimport { ConfirmPasswordValidator } from 'src/app/helpers/confirm-password.validator';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"ng-angular-popup\";\nimport * as i4 from \"src/app/services/reset-password.service\";\nimport * as i5 from \"@angular/common\";\nfunction ResetPasswordComponent_small_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 16);\n    i0.ɵɵtext(1, \"*Password is required*\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_small_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 16);\n    i0.ɵɵtext(1, \"*ConfirmPassword is required*\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_small_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 16);\n    i0.ɵɵtext(1, \"*Password didn't matched*\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class ResetPasswordComponent {\n  constructor(fb, activated, toast, router, resetPasswordService) {\n    this.fb = fb;\n    this.activated = activated;\n    this.toast = toast;\n    this.router = router;\n    this.resetPasswordService = resetPasswordService;\n    this.resetPasswordObj = new ResetPassword();\n  }\n  ngOnInit() {\n    this.resetPasswordForm = this.fb.group({\n      password: [null, Validators.required],\n      confirmPassword: [null, Validators.required]\n    }, {\n      validator: ConfirmPasswordValidator(\"password\", \"confirmPassword\")\n    });\n    this.activated.queryParams.subscribe(val => {\n      console.log(val);\n      this.emailToReset = val['email'];\n      let uriToken = val['code'];\n      this.emailToken = uriToken.replace(/ /g, '+');\n      console.log(this.emailToken);\n    });\n  }\n  reset() {\n    if (this.resetPasswordForm.valid) {\n      this.resetPasswordObj.email = this.emailToReset;\n      this.resetPasswordObj.newPassword = this.resetPasswordForm.value.password;\n      this.resetPasswordObj.confirmPassword = this.resetPasswordForm.value.confirmPassword;\n      this.resetPasswordObj.emailToken = this.emailToken;\n      this.resetPasswordService.resetEmail(this.resetPasswordObj).subscribe({\n        next: res => {\n          this.toast.success({\n            detail: 'SUCCESS',\n            summary: res.message,\n            duration: 3000\n          });\n          this.router.navigate(['/']);\n        },\n        error: err => {\n          this.toast.error({\n            detail: 'SUCCESS',\n            summary: \"Something went wrong\",\n            duration: 3000\n          });\n        }\n      });\n    } else {\n      ValidateForm.validateAllFormFields(this.resetPasswordForm);\n    }\n  }\n}\nResetPasswordComponent.ɵfac = function ResetPasswordComponent_Factory(t) {\n  return new (t || ResetPasswordComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.NgToastService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i4.ResetPasswordService));\n};\nResetPasswordComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ResetPasswordComponent,\n  selectors: [[\"app-reset-password\"]],\n  decls: 23,\n  vars: 8,\n  consts: [[1, \"outer\"], [1, \"container\"], [1, \"row\"], [1, \"offset-md-2\", \"col-lg-5\", \"col-md-7\", \"offset-lg-4\", \"offset-md-3\"], [1, \"panel\", \"border\", \"bg-white\"], [1, \"panel-heading\"], [1, \"pt-3\", \"font-weight-bold\"], [1, \"panel-body\", \"p-3\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\", \"pt-3\"], [1, \"input-field\"], [1, \"fa\", \"fa-lock\", \"px-2\"], [\"type\", \"password\", \"placeholder\", \"New Password\", \"formControlName\", \"password\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"type\", \"password\", \"placeholder\", \"Confirm Password \", \"formControlName\", \"confirmPassword\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"btn-block\", \"mt-4\", \"w-100\"], [1, \"text-danger\"]],\n  template: function ResetPasswordComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"div\", 5)(6, \"h3\", 6);\n      i0.ɵɵtext(7, \"Reset Password\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(8, \"div\", 7)(9, \"form\", 8);\n      i0.ɵɵlistener(\"ngSubmit\", function ResetPasswordComponent_Template_form_ngSubmit_9_listener() {\n        return ctx.reset();\n      });\n      i0.ɵɵelementStart(10, \"div\", 9)(11, \"div\", 10);\n      i0.ɵɵelement(12, \"span\", 11)(13, \"input\", 12);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(14, ResetPasswordComponent_small_14_Template, 2, 0, \"small\", 13);\n      i0.ɵɵelementStart(15, \"div\", 9)(16, \"div\", 10);\n      i0.ɵɵelement(17, \"span\", 11)(18, \"input\", 14);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(19, ResetPasswordComponent_small_19_Template, 2, 0, \"small\", 13);\n      i0.ɵɵtemplate(20, ResetPasswordComponent_small_20_Template, 2, 0, \"small\", 13);\n      i0.ɵɵelementStart(21, \"button\", 15);\n      i0.ɵɵtext(22, \"Reset\");\n      i0.ɵɵelementEnd()()()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"formGroup\", ctx.resetPasswordForm);\n      i0.ɵɵadvance(2);\n      i0.ɵɵclassProp(\"error\", ctx.resetPasswordForm.controls[\"password\"].dirty && ctx.resetPasswordForm.hasError(\"required\", \"password\"));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.resetPasswordForm.controls[\"password\"].dirty && ctx.resetPasswordForm.hasError(\"required\", \"password\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵclassProp(\"error\", ctx.resetPasswordForm.controls[\"confirmPassword\"].dirty && ctx.resetPasswordForm.hasError(\"required\", \"confirmPassword\"));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.resetPasswordForm.controls[\"confirmPassword\"].dirty && ctx.resetPasswordForm.hasError(\"required\", \"confirmPassword\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.resetPasswordForm.hasError(\"confirmPasswordValidator\", \"confirmPassword\"));\n    }\n  },\n  dependencies: [i5.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","ValidateForm","ResetPassword","ConfirmPasswordValidator","i0","ResetPasswordComponent","constructor","fb","activated","toast","router","resetPasswordService","ngOnInit","resetPasswordForm","group","password","required","confirmPassword","validator","queryParams","subscribe","val","console","log","emailToReset","uriToken","emailToken","replace","reset","valid","resetPasswordObj","email","newPassword","value","resetEmail","next","res","success","detail","summary","message","duration","navigate","error","err","validateAllFormFields","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\New folder\\IndiawishFrontend\\src\\app\\components\\reset-password\\reset-password.component.ts","D:\\New folder\\IndiawishFrontend\\src\\app\\components\\reset-password\\reset-password.component.html"],"sourcesContent":["import { NgToastService } from 'ng-angular-popup';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport ValidateForm from 'src/app/helpers/validateform';\r\nimport { ResetPassword } from 'src/app/models/reset-password.model';\r\nimport { ResetPasswordService } from 'src/app/services/reset-password.service';\r\nimport { ConfirmPasswordValidator } from 'src/app/helpers/confirm-password.validator';\r\n\r\n@Component({\r\n  selector: 'app-reset-password',\r\n  templateUrl: './reset-password.component.html',\r\n  styleUrls: ['./reset-password.component.scss'],\r\n})\r\nexport class ResetPasswordComponent implements OnInit {\r\n  resetPasswordForm!: FormGroup;\r\n  emailToReset!: string;\r\n  emailToken!: string;\r\n  resetPasswordObj = new ResetPassword();\r\n  constructor(private fb: FormBuilder, private activated: ActivatedRoute,\r\n    private toast: NgToastService,\r\n    private router: Router,\r\n    private resetPasswordService: ResetPasswordService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.resetPasswordForm = this.fb.group({\r\n      password: [null, Validators.required],\r\n      confirmPassword: [null, Validators.required]\r\n    },\r\n      {\r\n        validator: ConfirmPasswordValidator(\"password\", \"confirmPassword\")\r\n      });\r\n    this.activated.queryParams.subscribe(val => {\r\n      console.log(val);\r\n      this.emailToReset = val['email'];\r\n      let uriToken = (val['code']);\r\n      this.emailToken = uriToken.replace(/ /g, '+');\r\n      console.log(this.emailToken)\r\n    });\r\n  }\r\n  reset() {\r\n    if (this.resetPasswordForm.valid) {\r\n      this.resetPasswordObj.email = this.emailToReset;\r\n      this.resetPasswordObj.newPassword = this.resetPasswordForm.value.password;\r\n      this.resetPasswordObj.confirmPassword = this.resetPasswordForm.value.confirmPassword;\r\n      this.resetPasswordObj.emailToken = this.emailToken;\r\n      this.resetPasswordService.resetEmail(this.resetPasswordObj)\r\n        .subscribe({\r\n          next: (res) => {\r\n            this.toast.success({\r\n              detail: 'SUCCESS',\r\n              summary: res.message,\r\n              duration: 3000,\r\n            });\r\n            this.router.navigate(['/'])\r\n          },\r\n          error: (err) => {\r\n            this.toast.error({\r\n              detail: 'SUCCESS',\r\n              summary: \"Something went wrong\",\r\n              duration: 3000,\r\n            });\r\n          }\r\n        })\r\n    } else {\r\n      ValidateForm.validateAllFormFields(this.resetPasswordForm);\r\n    }\r\n  }\r\n}\r\n","<div class=\"outer\">\r\n    <div class=\"container\">\r\n        <div class=\"row\">\r\n            <div class=\"offset-md-2 col-lg-5 col-md-7 offset-lg-4 offset-md-3\">\r\n                <div class=\"panel border bg-white\">\r\n                    <div class=\"panel-heading\">\r\n                        <h3 class=\"pt-3 font-weight-bold\">Reset Password</h3>\r\n                    </div>\r\n                    <div class=\"panel-body p-3\">\r\n                        <form [formGroup]=\"resetPasswordForm\" (ngSubmit)=\"reset()\">\r\n                            <div class=\"form-group pt-3\">\r\n                                <div class=\"input-field\" [class.error]=\"resetPasswordForm.controls['password'].dirty && resetPasswordForm.hasError('required','password')\"> <span class=\"fa fa-lock px-2\"></span> <input type=\"password\" placeholder=\"New Password\" formControlName=\"password\">\r\n                                </div>\r\n                            </div>\r\n                            <small *ngIf=\"resetPasswordForm.controls['password'].dirty && resetPasswordForm.hasError('required','password')\" class=\"text-danger\">*Password is required*</small>\r\n                            <div class=\"form-group pt-3\">\r\n                                <div class=\"input-field\" [class.error]=\"resetPasswordForm.controls['confirmPassword'].dirty && resetPasswordForm.hasError('required','confirmPassword')\"> <span class=\"fa fa-lock px-2\"></span> <input type=\"password\" placeholder=\"Confirm Password \" formControlName=\"confirmPassword\">\r\n                                </div>\r\n                            </div>\r\n                            <small *ngIf=\"resetPasswordForm.controls['confirmPassword'].dirty && resetPasswordForm.hasError('required','confirmPassword')\" class=\"text-danger\">*ConfirmPassword is required*</small>\r\n                            <small *ngIf=\"resetPasswordForm.hasError('confirmPasswordValidator','confirmPassword')\" class=\"text-danger\">*Password didn't matched*</small>\r\n\r\n                            <button type=\"submit\" class=\"btn btn-primary btn-block mt-4 w-100\">Reset</button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}